 GIT HomeWork 1


 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

=============================================================================

JSON
 4. Создать внешний репозиторий c названием HomeWork_Git_JSON.		---->	Заходим на сайт github.com в свою учетную запись. Далее "Your profile" - "Repositories" - "New" - Вводим название и необходимые настройки - "Create repository"
 5. Клонировать репозиторий HomeWork_Git_JSON на локальный компьютер.	---->	$ git clone link(ссылка на внешний репозиторий)
 6. Внутри локального HomeWork_Git_JSON создать файл “new.json”.	---->	$ cd HomeWork_Git_JSON/(заходим в папку клонированного внешнего репозитория)
									     	$ touch new.json	
 6.1. Внутри локального HomeWork_Git_JSON создать файл “new.json”.	---->	$ touch HomeWork_Git_JSON/new.json
 7. Добавить файл под гит.						---->	$ git add new.json
 8. Закоммитить файл.							---->	$ git commit -m "add_file"
 9. Отправить файл на внешний GitHub репозиторий.			---->	$ git push
 10. Отредактировать содержание файла “new.json” - написать 		---->	$ vim new.json (В редакторе заполняем необходимую информацию, сохраняем и выходим из редактора)
	информацию о себе (ФИО, возраст, количество домашних 
	животных, будущая желаемая зарплата). Всё написать 
	в формате JSON.
 11. Отправить изменения на внешний репозиторий.			----> 	$ git commit -am "changes"
									     	$ git push
 12. Создать файл preferences.json					----> 	$ touch preferences.json
 13. В файл preferences.json добавить информацию о своих 		---->	$ vim preferences.json (В редакторе заполняем необходимую информацию, сохраняем и выходим из редактора)
	предпочтениях (Любимый фильм, любимый сериал, любимая еда,
	любимое время года, сторона которую хотели бы посетить) 
	в формате JSON.
 14. Создать файл sklls.json добавить информацию о скиллах которые 	----> 	$ cat > skills.json
	будут изучены на курсе в формате JSON				     	{
 										       "Skills" : ["Terminal Linux", "GitBash", "HTTP Methods", "JSON", "XML", "API",
              									          "POSTMAN", "DevTools", "Charles", "Fidler", "JMeter", "SQL"]
									      	}
 15. Отправить сразу 2 файла на внешний репозиторий.			---->	$ git add preferences.json skills.json
										$ git commit -m "add_2_files"
										$ git push
 16. На веб интерфейсе создать файл bug_report.json.			---->	"Add new file" - "Create new file" -  В поле "Name your file..." вводим bud_report.json - "Commit new file"
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	---->	Нажать на файл "bug_report.json" - Далее "Edit this file" - Написать что-нибудь внутри файла (Например: 123) - "Commit changes"
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить 	---->	Нажать на файл "bug_report.json" - Далее "Edit this file" - 
	баг репорт в формате JSON.						{
  											"ID" : "Bug ID",
   											"Summary" : "Short description of the bug",
											"Environment" : "Link to the build/version of Software and all of the environment",
											"Steps to reproduce" : "Full and detailed list of steps to reproduce",
											"Expected result" : "What result should have been without error",
											"Actual result" : "What was the actual result",
											"Attachments" : "Logs, screenshots, video"
										}
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	---->	Нажать "Commit changes"
 20. Синхронизировать внешний и локальный репозиторий HomeWork_Git_JSON ---->	$ git pull

=============================================================================

XML
 21. Создать внешний репозиторий c названием HomeWork_Git_XML.		---->	Заходим на сайт github.com в свою учетную запись. Далее "Your profile" - "Repositories" - "New" - Вводим название и необходимые настройки - "Create repository"
 22. Клонировать репозиторий HomeWork_Git_XML на локальный компьютер.	---->	$ git clone link(ссылка на внешний репозиторий)
 23. Внутри локального HomeWork_Git_XML создать файл “new.xml”.		---->	$ touch HomeWork_Git_XML/new.xml
 24. Добавить файл под гит.						---->	$ git add .
 25. Закоммитить файл.							---->	$ git commit -m "add_new_file"
 26. Отправить файл на внешний GitHub репозиторий.			---->	$ git push
 27. Отредактировать содержание файла “new.xml” - написать информацию	---->	$ vim new.xml (В редакторе заполняем необходимую информацию, сохраняем и выходим из редактора)
	о себе (ФИО, возраст, количество домашних животных, будущая 
	желаемая зарплата). Всё написать в формате XML.
 28. Отправить изменения на внешний репозиторий.			---->	$ git commit -am "changes"
										$ git push
 29. Создать файл preferences.xml					---->	$ touch preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях	---->	$ vim preferences.xml (В редакторе заполняем необходимую информацию, сохраняем и выходим из редактора)
	(Любимый фильм, любимый сериал, любимая еда, любимое время 
	года, сторона которую хотели бы посетить) в формате XML.
 31. Создать файл sklls.xml добавить информацию о скиллах которые	---->	$ cat skills.xml
	будут изучены на курсе в формате XML					<?xml version="1.0" encoding="utf-8" ?>
										<skills>
									        	<point_1>Терминал Linux</point_1>
        										<point_2>GitBash</point_2>
        										<point_3>HTTP Методы</point_3>
        										<point_4>Формат JSON</point_4>
        										<point_5>Формат XML</point_5>
        										<point_6>API</point_6>
        										<point_7>POSTMAN</point_7>
        										<point_8>DevTools</point_8>
        										<point_9>Charles</point_9>
        										<point_10>Fidler</point_10>
        										<point_11>JMeter</point_11>
        										<point_12>Основы SQL</point_12>
										</skills>
 32. Сделать коммит в одну строку.					---->	$ git commit -am "add_2_files"
 33. Отправить сразу 2 файла на внешний репозиторий.			---->	$ git add preferences.xml skills.xml && git commit -m "add_2_files" && git push
 34. На веб интерфейсе создать файл bug_report.xml.			---->	"Add new file" - "Create new file" -  В поле "Name your file..." вводим bud_report.xml - "Commit new file"
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	---->	Нажать на файл "bug_report.xml" - Далее "Edit this file" - Написать в первой строке: <?xml version="1.0" encoding="utf-8"?> - "Commit changes"
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить	----> 	Нажать на файл "bug_report.json" - Далее "Edit this file" - 
	баг репорт в формате XML.						<?xml version="1.0" encoding="utf-8"?>
										<attribute>
  											<id>Уникальный идентификатор</id>
  											<summary>Краткое описание ошибки</summary>
  											<environment>Ссылка на билд/версию ПО и всего окружения</environment>
  								 			<steps>Полный перечень шагов для воспроизведения ошибки</steps>
  											<expected_result>Ожидаемый результат</expected_result>
  											<actual_result>фастический результат</actual_result>
  											<attachments>Вложения: логи, скриншоты, видео</attachments>
										</attribute>		
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	---->	Нажать "Commit changes"
 38. Синхронизировать внешний и локальный репозиторий HomeWork_Git_XML	---->	$ git pull

=============================================================================

TXT
 39. Создать внешний репозиторий c названием HomeWork_Git_TXT.		---->	Заходим на сайт github.com в свою учетную запись. Далее "Your profile" - "Repositories" - "New" - Вводим название и необходимые настройки - "Create repository"
 40. Клонировать репозиторий HomeWork_Git_TXT на локальный компьютер.	---->	$ git clone link(ссылка на внешний репозиторий)
 41. Внутри локального HomeWork_Git_TXT создать файл “new.txt”.		---->	$ touch HomeWork_Git_TXT/new.txt
 42. Добавить файл под гит.						---->	$ git add new.txt
 43. Закоммитить файл.							---->	$ git commit -m "add_new_file"
 44. Отправить файл на внешний GitHub репозиторий.			---->	$ git push
 45. Отредактировать содержание файла “new.txt” - написать информацию	---->	$ vim new.txt (В редакторе заполняем необходимую информацию, сохраняем и выходим из редактора)
	о себе (ФИО, возраст, количество домашних животных, будущая 
	желаемая зарплата). Всё написать в формате TXT.
 46. Отправить изменения на внешний репозиторий.			---->	$ git commit -am "changes" && git push
 47. Создать файл preferences.txt					---->	$ touch preferences.txt	
 48. В файл preferences.txt” добавить информацию о своих предпочтениях 	---->	$ vim preferences.txt (В редакторе заполняем необходимую информацию, сохраняем и выходим из редактора)
	(Любимый фильм, любимый сериал, любимая еда, любимое время 
	года, сторона которую хотели бы посетить) в формате TXT.
 49. Создать файл sklls.txt добавить информацию о скиллах которые 	---->	$ cat skills.txt
	будут изучены на курсе в формате TXT					Навыки, которые будут получены в ходе прохождения курса:
    											1. Базовый уровень знаний терминала Linux.
        										2. Умение обращения с GitBash.
        										3. Знание и понимание основных методов протокола HTTP.
        										4. Работа с файлами в формате JSON.
        										5. Работа с файлами в формате XML.
        										6. Знание и понимаение, что такое API. Как с ним работать при тестировании.
        										7. Знание и умение пользоваться POSTMAN.
        										8. Знание и умение пользоваться DevTools.
        										9. Знание и умение пользоваться Charles.
        										10. Знание и умение пользоваться Fidler.
        										11. Знание и умение пользоваться Jmeter.
        										12. Знание основ SQL.
 50. Сделать коммит в одну строку.					---->	$ git commit -am "add_2_files"
 51. Отправить сразу 2 файла на внешний репозиторий.			---->	$ git push 
 52. На веб интерфейсе создать файл bug_report.txt.			---->	"Add new file" - "Create new file" -  В поле "Name your file..." вводим bud_report.txt - "Commit new file"
 53. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	---->	Нажать на файл "bug_report.txt" - Далее "Edit this file" - Написать в первой строке: Текстовый файл - "Commit changes"
 54. На веб интерфейсе модифицировать файл bug_report.txt, добавить 	---->	Нажать на файл "bug_report.json" - Далее "Edit this file" - 
	баг репорт в формате TXT.						Основные поля баг-репорта:
											1.Уникальный идентификатор (ID),
											2.Описание (Summary): Краткое описание ошибки,
											3.Окружение (Environment): Ссылка на билд/версию ПО и всего окружения,
											4.Шаги воспроизведения (Steps to reproduce): Полный перечень шагов для воспроизведения ошибки, 
											5.Ожидаемый результат (Expected result),
											6.Фактический результат (Actual result),
											7.Вложения (Attachments): логи, скриншоты, видео. 
 55. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	---->	Нажать "Commit changes"
 56. Синхронизировать внешний и локальный репозиторий HomeWork_Git_TXT	---->	$ git pull